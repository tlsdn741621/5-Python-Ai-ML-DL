## Flask 기본 개념 및 서버 실행 가이드
Flask는 파이썬으로 웹 애플리케이션을 만들 수 있게 도와주는
**마이크로 웹 프레임워크**입니다.
'마이크로'라는 이름에서 알 수 있듯이,
핵심 기능만 간결하게 유지하고 있어 가볍고 유연하며 배우기 쉽다는 장점이 있습니다.
반면, 필요한 기능은 라이브러리(확장)를 추가하여 자유롭게 확장할 수 있습니다.

-----

### **Flask의 핵심 개념**

  * **라우팅 (Routing)**:
  사용자가 웹사이트의 특정 주소(URL)에 접속했을 때,
  어떤 함수를 실행할지를 지정하는 것을 의미합니다.
  예를 들어, 사용자가 `/home` 주소로 들어오면
  `show_home()` 함수를 실행하도록 연결해주는 역할입니다.
  `@app.route('/')`와 같은 데코레이터를 사용하여 간단하게 구현할 수 있습니다.

  * **템플릿 (Templates)**:
  웹 페이지의 골격이 되는 HTML 파일입니다.
  Flask는 **Jinja2**라는 템플릿 엔진을 사용하여
  HTML 파일에 동적인 데이터(예: 변수, 반복문)를 손쉽게 삽입할 수 있게 해줍니다.
  이를 통해 매번 같은 구조의 HTML을 반복해서 작성할 필요 없이, 내용만 바꿔서 보여줄 수 있습니다.

  * **요청과 응답 (Request and Response)**:
  웹은 기본적으로 사용자의 '요청(Request)'과
  서버의 '응답(Response)'으로 동작합니다.
  Flask에서는 사용자가 보낸 데이터(예: 로그인 정보, 게시글 내용)에 접근하고,
  서버가 사용자에게 보여줄 결과(예: HTML 페이지, 데이터)를 생성하여
  보내는 과정을 간단하게 처리할 수 있습니다.

  * **WSGI (Web Server Gateway Interface)**:
  파이썬 스크립트(Flask 애플리케이션)가 웹 서버와 통신하기 위한 표준 규약입니다.
  Flask는 이 WSGI 규약을 따르는 내장 개발 서버를 포함하고 있어,
  별도의 복잡한 설정 없이도 쉽게 서버를 실행하고 테스트할 수 있습니다.

-----

### **기본 Flask 서버 실행 방법**

Flask 서버를 실행하는 과정은 매우 간단하며, 아래의 단계를 따르면 됩니다.

#### **1. Flask 설치**

가장 먼저 컴퓨터에 Flask 라이브러리를 설치해야 합니다.
터미널(Windows의 경우 명령 프롬프트 또는 PowerShell)을 열고 아래 명령어를 입력하세요.

```bash
pip install Flask
```

#### **2. 기본 파이썬 파일 작성**

원하는 편집기(예: VS Code, PyCharm 등)를 열어
`app.py`와 같은 이름으로 파이썬 파일을 생성하고 아래 코드를 작성합니다.

```python
from flask import Flask

# Flask 애플리케이션 생성
app = Flask(__name__)

# 라우팅 설정: '/' 주소로 접속하면 home() 함수 실행
@app.route('/')
def home():
    return 'Hello, World!'

# 서버 실행 (이 파일을 직접 실행했을 경우에만)
if __name__ == '__main__':
    app.run(debug=True)
```

  * `app = Flask(__name__)`: Flask 애플리케이션 객체를 생성합니다.
  * `@app.route('/')`: 루트 URL(`/`)에 대한 요청을 처리할 함수를 지정합니다.
  * `def home():`: 요청이 들어왔을 때 실행될 함수입니다.
  * `return 'Hello, World!'`: 함수가 실행된 후 웹 브라우저에 보여줄 내용입니다.
  * `app.run(debug=True)`: Flask 개발 서버를 실행합니다.
  `debug=True` 옵션은 코드가 변경될 때마다 서버를 자동으로 재시작하고, 오류 발생 시 자세한 정보를 보여주어 개발에 유용합니다.

#### **3. 서버 실행**

작성한 파이썬 파일이 있는 폴더로 터미널에서 이동한 후, 아래 명령어를 입력하여 서버를 실행합니다.

```bash
python app.py
```

또는 Flask 2.0 이상 버전부터는 아래의 간편한 명령어를 사용할 수도 있습니다.

```bash
flask --app app run
```

서버가 성공적으로 실행되면 터미널에 다음과 같은 메시지가 나타납니다.

```
 * Running on http://127.0.0.1:5000/
```

이제 웹 브라우저를 열고 주소창에 `http://127.0.0.1:5000` 또는 `http://localhost:5000`을 입력하면 "Hello, World\!" 메시지가 화면에 나타나는 것을 확인할 수 있습니다.

-----

### **자주 사용하는 Flask 명령어**

Flask는 개발 편의를 위해 몇 가지 유용한 명령어를 제공합니다. 이 명령어들은 터미널에서 `flask`로 시작합니다.

  * **`flask run`**: 개발 서버를 실행합니다. (가장 기본적인 명령어)

      * **`flask run --host=0.0.0.0`**: 외부 네트워크에서도 접속할 수 있도록 서버를 실행합니다.
      * **`flask run --port=8000`**: 기본 포트(5000)가 아닌 다른 포트(예: 8000)로 서버를 실행합니다.

  * **`flask shell`**: 애플리케이션의 컨텍스트 안에서 파이썬 셸을 실행합니다. 데이터베이스 모델을 테스트하거나 앱의 특정 부분을 실험해볼 때 유용합니다.

  * **`flask routes`**: 애플리케이션에 정의된 모든 URL 규칙(라우트) 목록을 보여줍니다. 프로젝트 규모가 커졌을 때 전체 URL 구조를 파악하기 좋습니다.

  * **`flask db`**: **Flask-Migrate** 확장 라이브러리를 사용할 때 데이터베이스 마이그레이션 관련 작업을 수행하는 명령어 그룹입니다. (예: `flask db init`, `flask db migrate`, `flask db upgrade`)