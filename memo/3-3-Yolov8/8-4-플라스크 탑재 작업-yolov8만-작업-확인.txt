1
app.py 

import os
import torch
import torch.nn as nn
import torchvision.transforms as transforms
from torchvision import models
from flask import Flask, request, jsonify, render_template, url_for, send_from_directory, send_file
from flask_cors import CORS
from flask_socketio import SocketIO, emit
from PIL import Image
import io
import json
import threading
import cv2
import numpy as np
import yfinance as yf
from werkzeug.utils import secure_filename
from ultralytics import YOLO
import urllib.parse
import re
import eventlet
import eventlet.wsgi




# ✅ Flask 앱 초기화
app = Flask(__name__)
CORS(app)  # CORS 허용

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


# ✅ YOLO 모델 로드
# yolo_model = YOLO("model/best-busanit501-aqua.pt")
yolo_model = YOLO("model/best-apple-test.pt")
# app.config['SERVER_NAME'] = '10.100.201.87:5000'  # Flask 서버 주소와 포트 설정

# ✅ 결과 저장 폴더 설정
UPLOAD_FOLDER = 'uploads'
RESULT_FOLDER = 'results'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)

processing_status = {}

# 🔹 2️⃣ YOLO 비동기 처리 함수
def process_yolo(file_path, output_path, file_type):
    """YOLO 모델을 비동기적으로 실행"""
    try:
        print(f"✅ [INFO] YOLO 처리 시작 - {file_path}")

        if file_type == 'image':
            results = yolo_model(file_path)
            result_img = results[0].plot()
            cv2.imwrite(output_path, result_img)

        elif file_type == 'video':
            cap = cv2.VideoCapture(file_path)
            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            fps = int(cap.get(cv2.CAP_PROP_FPS))

            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                results = yolo_model(frame)
                result_frame = results[0].plot()
                out.write(result_frame)

            cap.release()
            out.release()

        print(f"✅ [INFO] YOLO 처리 완료 - {output_path}")

    except Exception as e:
        print(f"❌ [ERROR] YOLO 처리 중 오류 발생: {str(e)}")

@app.route('/download/<filename>')
def download_file(filename):
    file_path = os.path.join(RESULT_FOLDER, filename)
    if not os.path.isfile(file_path):
        return jsonify({"error": "File not found"}), 404
    return send_file(file_path, as_attachment=True, download_name=filename)



# 🔹 1️⃣ 파일 업로드 API (POST 요청)
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "파일이 업로드되지 않았습니다."}), 400

    file = request.files['file']

    if file.filename == '':
        return jsonify({"error": "파일이 선택되지 않았습니다."}), 400

    filename = file.filename
    file_path = os.path.join(UPLOAD_FOLDER, filename)
    file.save(file_path)

    output_filename = f"result_{filename}"
    # 결과 파일은 RESULT_FOLDER에 저장됩니다.
    output_path = os.path.join(RESULT_FOLDER, output_filename)

    print("filename : " + filename)
    # 업로드된 파일의 확장자를 확인하여 이미지(image)인지 비디오(video)인지 판별합니다.
    if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
        file_type = 'image'
    elif filename.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
        file_type = 'video'
    else:
        # 지원하지 않는 파일 형식일 경우 400 에러를 반환합니다.
        return jsonify({"error": "Unsupported file type"}), 400

    request_id = filename.split(".")[0]  # 파일명을 요청 ID로 사용

    # YOLO 비동기 처리
    thread = threading.Thread(target=process_yolo, args=(file_path, output_path, file_type, request_id))
    thread.start()

    # ✅ 업로드 성공 응답
    return jsonify({
        "message": "파일 업로드 성공",
        "filename": filename,
        "file_url": url_for('uploaded_file', filename=filename, _external=True)
    }), 200


# 🔹 2️⃣ 업로드된 파일 제공 API
@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)



# 🔹 1️⃣ 기본 Index 화면 (파일 업로드 UI)
@app.route("/")
def index():
    return render_template('index.html')

# 🔹 4️⃣ 이미지 분류 API (POST 요청)
@app.route("/predict/<model_type>", methods=["POST"])
def predict(model_type):
    if "image" not in request.files:
        return jsonify({"error": "이미지가 업로드되지 않았습니다."}), 400

    file = request.files["image"]

    if file.filename == "":
        return jsonify({"error": "파일이 선택되지 않았습니다."}), 400

    filename = file.filename
    sanitized_filename = re.sub(r"[^\w.-]", "_", filename)  # 공백 및 특수문자를 _로 변경

    # ✅ YOLOv8 처리 분기
    if model_type == "yolo":
        file_path = os.path.join(UPLOAD_FOLDER, sanitized_filename)
        file.save(file_path)

        output_filename = f"result_{sanitized_filename}"
        output_path = os.path.join(RESULT_FOLDER, output_filename)

        print(f"YOLO 처리 시작 predict_yolo , filename : {filename}")

        # 파일 유형 확인
        if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
            file_type = 'image'
        elif filename.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
            file_type = 'video'
        else:
            return jsonify({"error": "지원되지 않는 파일 형식입니다."}), 400

            # ✅ YOLO 비동기 처리 (스레드 실행 후 join)
        thread = threading.Thread(target=process_yolo, args=(file_path, output_path, file_type))
        thread.start()
        thread.join()  # ✅ YOLO 처리 완료될 때까지 대기

        # ✅ JSON 응답으로 이미지/동영상 링크 전달
        return jsonify({
            "message": "YOLO 모델이 파일을 처리 중입니다.",
            "file_url": url_for('serve_result', filename=os.path.basename(output_path), _external=True),
            "download_url": url_for('download_file', filename=os.path.basename(output_path), _external=True),
            "file_type": file_type,
        })



# 🔹 5️⃣ 결과 파일 제공 API
@app.route('/results/<filename>')
def serve_result(filename):
    """결과 파일 제공"""
    file_path = os.path.join(RESULT_FOLDER, filename)

    # ✅ 파일이 존재하는지 확인
    if not os.path.exists(file_path):
        return jsonify({"error": f"파일 '{filename}' 이 존재하지 않습니다."}), 404

    print(f"📢 결과 파일 제공: {file_path}")  # 로그 출력
    return send_from_directory(RESULT_FOLDER, filename)


# ✅ Flask 실행
if __name__ == "__main__":
    eventlet.wsgi.server(eventlet.listen(("0.0.0.0", 5000)), app)
	
	
2
index.html 

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flask Server - Unified Image Classification</title>

    <!-- ✅ CSS 파일 연결 -->
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/style.css') }}">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!--    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.4.1/socket.io.js"></script>-->
</head>
<body>

    <h1>Flask Server - Unified Image Classification</h1>
    <p>팀별 모델과 YOLOv8을 사용하여 이미지 분류 및 객체 탐지를 수행할 수 있습니다.</p>

    <!-- 🔹 공통 파일 업로드 UI -->
    <div class="upload-section">
        <h3>Upload File</h3>
        <form id="uploadForm" enctype="multipart/form-data">
            <input type="file" id="fileInput"  required>
            <button type="submit">Upload</button>
        </form>
        <div id="loading" style="display: none;">Processing your file... Please wait!</div>
        <div id="result"></div>
    </div>

    <!-- 🔹 모델 선택 UI -->
    <div class="upload-section">
        <h3>Select Model</h3>
        <button onclick="uploadFile('yolo')">Predict (YOLOv8 - 객체 탐지)</button>
    </div>

    <!-- 🔹 업로드된 파일 미리보기 -->
    <div class="preview-container">
        <img id="preview-image" src="" style="display: none; max-width: 300px; margin-top: 10px; border: 1px solid #ddd;">
    </div>

    <script>
        const form = document.getElementById('uploadForm');
        const fileInput = document.getElementById('fileInput');
        const loading = document.getElementById('loading');
        const result = document.getElementById('result');
        const previewImage = document.getElementById('preview-image');


        let uploadedFile = null; // 업로드된 파일 저장

        // 🔹 파일 업로드 처리
        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            if (fileInput.files.length === 0) {
                alert("파일을 선택하세요.");
                return;
            }

            const formData = new FormData();
            formData.append('file', fileInput.files[0]);
            uploadedFile = fileInput.files[0]; // 파일 저장

            loading.style.display = 'block';
            result.innerHTML = '';

            const response = await fetch('/upload', {
                method: 'POST',
                body: formData,
            });

            const data = await response.json();

            if (data.error) {
                alert(data.error);
                loading.style.display = 'none';
            } else {
                console.log("File uploaded successfully.");
                alert("객체탐지 클릭해주세요")
                loading.innerHTML = '업로드 완료'

            }
        });

        // 🔹 이미지 분류 모델 예측 요청 (AJAX)
        function uploadFile(modelType) {
            if (!uploadedFile) {
                alert("먼저 파일을 업로드하세요.");
                return;
            }

            let formData = new FormData();
            formData.append("image", uploadedFile);

            let endpoint = modelType === "yolo" ? "/predict/yolo" : `/predict/${modelType}`;
              loading.innerHTML = `
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="spinner" style="
                  width: 24px;
                  height: 24px;
                  border: 4px solid #f3f3f3;
                  border-top: 4px solid #4caf50;
                  border-radius: 50%;
                  animation: spin 1s linear infinite;">
                </div>
                <p style="margin: 0;">파일 처리 중입니다...</p>
              </div>
            `;
            $.ajax({
                url: endpoint,
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                beforeSend: function() {
                    loading.style.display = 'block';
                    result.innerHTML = '';
                },
                success: function(response) {
                    console.log(response);
                    loading.style.display = 'none';

                    if (modelType === "yolo") {
                        console.log("(modelTyp : yolo...")
                        console.log("(modelTyp : response.",response)
                        console.log("(modelTyp : response.file_url...",response.file_url)

                        if (response.file_type === "image") {
                            // 이미지인 경우: 미리보기 표시
                            result.innerHTML = `<p>처리된 이미지 결과:</p><a href="${response.file_url}" target="_blank">결과 보기</a>`;
                            previewImage.src = response.file_url;
                            previewImage.style.display = "block";
                        } else if (response.file_type === "video") {
                            // 비디오인 경우: 다운로드 링크 표시
                            result.innerHTML = `
                                <p>처리된 비디오 결과:</p>
                                <a href="${response.download_url}" download>비디오 다운로드</a>
                            `;
                            previewImage.style.display = "none";
                        } else {
                            // 지원하지 않는 파일 형식
                            result.innerHTML = `<p>지원하지 않는 파일 형식입니다.</p>`;
                            previewImage.style.display = "none";
                        }
                    } else {
                        // 이미지 분류 모델 결과 표시
                        result.innerHTML = `
                            <p>파일명: ${response.filename}</p>
                            <p>예측 결과: <strong>${response.predicted_class}</strong></p>
                            <p>정확도: ${response.confidence}</p>
                        `;
                    }
                },
                error: function(error) {
                    console.error("Error:", error);
                    result.innerHTML = "<p style='color:red;'>예측 실패</p>";
                    loading.style.display = 'none';
                }
            });

            // 이미지 미리보기
            let reader = new FileReader();
            reader.onload = function(e) {
                previewImage.src = e.target.result;
                previewImage.style.display = "block";
            };
            reader.readAsDataURL(uploadedFile);
        }

    </script>

</body>
</html>


3
프로그레스 바 추가. 

static/css/style.css 
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

